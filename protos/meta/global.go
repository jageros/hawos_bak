// Generated by gen_meta.py
// DO NOT EDIT!

package meta

import (
	"errors"

	"github.com/jageros/hawos/protos/pb"
)

//@ C2S_AUTH_TOKEN    req: AuthMsg    resp: AuthResp
//------------------------------------------------------------------------------------------
// implement IMeta
type C2S_AUTH_TOKEN_Meta struct {
}

func (m *C2S_AUTH_TOKEN_Meta) GetMsgID() IMsgID {
	return pb.MsgID_C2S_AUTH_TOKEN
}

func (m *C2S_AUTH_TOKEN_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.AuthMsg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_AUTH_TOKEN_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_AUTH_TOKEN_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.AuthMsg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_AUTH_TOKEN_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.AuthResp)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_AUTH_TOKEN_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_AUTH_TOKEN_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.AuthResp{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_AUTH_TOKEN END ----------------------------------------

//@ C2S_PING req: Ping  resp: Pong
//------------------------------------------------------------------------------------------
// implement IMeta
type C2S_PING_Meta struct {
}

func (m *C2S_PING_Meta) GetMsgID() IMsgID {
	return pb.MsgID_C2S_PING
}

func (m *C2S_PING_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.Ping)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PING_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *C2S_PING_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.Ping{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *C2S_PING_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	_reply, ok := reply.(*pb.Pong)
	if !ok {
		p, ok := reply.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("C2S_PING_Meta EncodeReply error type")
	}

	return _reply.Marshal()
}

func (m *C2S_PING_Meta) DecodeReply(data []byte) (interface{}, error) {
	reply := &pb.Pong{}
	if err := reply.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return reply, nil
	}
}

//------------------------------------ C2S_PING END ----------------------------------------

//@ S2C_CROSS_DAY req: CrossDayMsg
//------------------------------------------------------------------------------------------
// implement IMeta
type S2C_CROSS_DAY_Meta struct {
}

func (m *S2C_CROSS_DAY_Meta) GetMsgID() IMsgID {
	return pb.MsgID_S2C_CROSS_DAY
}

func (m *S2C_CROSS_DAY_Meta) EncodeArg(arg interface{}) ([]byte, error) {
	_arg, ok := arg.(*pb.CrossDayMsg)
	if !ok {
		p, ok := arg.([]byte)
		if ok {
			return p, nil
		}

		return nil, errors.New("S2C_CROSS_DAY_Meta EncodeArg error type")
	}

	return _arg.Marshal()
}

func (m *S2C_CROSS_DAY_Meta) DecodeArg(data []byte) (interface{}, error) {
	arg := &pb.CrossDayMsg{}
	if err := arg.Unmarshal(data); err != nil {
		return nil, err
	} else {
		return arg, nil
	}
}

func (m *S2C_CROSS_DAY_Meta) EncodeReply(reply interface{}) ([]byte, error) {
	return nil, nil
}

func (m *S2C_CROSS_DAY_Meta) DecodeReply(data []byte) (interface{}, error) {
	return nil, nil
}

//------------------------------------ S2C_CROSS_DAY END ----------------------------------------

